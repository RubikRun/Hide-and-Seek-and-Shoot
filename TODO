- BUG0 (stretching bug) (FIXED)

- BUG1 (small shape texture bug)
    When shapes (walls) are very small, relative to their texture,
    I want to scale down the texture accordingly.
    Maybe keep some scale factor in the config file

- BUG2 (mouse move while button pressed) (FIXED, or rather realised it's not a bug in my program)
    While a key is pressed, the mouse cannot be moved,
    when using the track pad

- BUG3 (cannot reach map edge with Person) (FIXED)
    When a Person moves, they move with some constant speed,
    hence some velocity vector with always the same length, say 10.
    Then if the Person is say 8 pixels away from a map edge
    and tries to move towards it, it will not move at all,
    because my algorithm will find out that the next position
    would be outside the map and will not move the Person at all.
    However, what I want is not that.
    What I want is, in such cases the Person to move towards an edge,
    but stop at the edge. So technically they will move with a speed
    less than their speed.

- BUG4 (sprite collision) (FIXED)
    Sprite collision is not very well implemented in SFML.
    It relies on a bounding rectangle parallel to the X and Y axes,
    which is not good enough.
    For now my idea of a fix is to use head sprites that are circular
    and detect collisions with the radius.
    Which is also not ideal, because it forces me to have circular heads,
    but otherwise it would get too complicated.
    Not to say it's not possible, I just don't want to deal with it in this game.
    It is a side project for another time - generic sprite wrapper,
    that can be used to define the sprite bounds to be any complex shape.

- BUG5 (movement direction change when collision)
    When the person tries to move to some direction,
    but there is an object there and a collision is detected,
    the person just stops.
    In some cases it's more sensible to change the direction slightly
    so that it can move along the object.
    Example: If the player is holding W and D keys, the player is moving
    with direction vector (1, -1) diagonally to the right and up.
    With that direction, when the person encounters the right wall,
    it would be sensible that he would move (0, -1) only upward.
    But instead he just stops.
    Not sure how to handle this in all cases.
    Something like that: After figuring out the the direction vector
    gives an invalid position, it should be checked if there is another
    direction vector within a small enough angle to the first one
    (probably less than 90 degrees is fine).
    But how would that be detected? I currently have no idea.